{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","document","addEventListener","this","handleKeyUp","e","sound","Audio","keyCode","keyPressed","getElementById","play","classList","add","setTimeout","remove","react_default","a","createElement","className","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA6CeA,qMAxCXC,SAASC,iBAAiB,QAASC,KAAKC,iDAE9BC,GACV,IAAMC,EAAQ,IAAIC,MAAM,qEAAuEF,EAAEG,QAAU,QACrGC,EAAaR,SAASS,eAAeL,EAAEG,SAG7B,KAAdH,EAAEG,SACY,KAAdH,EAAEG,SACY,KAAdH,EAAEG,SACY,KAAdH,EAAEG,SACY,KAAdH,EAAEG,SACY,KAAdH,EAAEG,SACY,KAAdH,EAAEG,SACY,MAAdH,EAAEG,UAEFF,EAAMK,OACNF,EAAWG,UAAUC,IAAI,WACzBC,WAAW,WACTL,EAAWG,UAAUG,OAAO,YAC3B,uCAKL,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,MAAhC,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,OAAhC,aApCUC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAS5B,SAASS,eAAe,SDuH3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0de7a342.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyUp);\n  }\n  handleKeyUp(e) {\n    const sound = new Audio('https://raw.githubusercontent.com/hdn301/drum-kit/gh-pages/sounds/' + e.keyCode + '.wav')\n    const keyPressed = document.getElementById(e.keyCode);\n\n    if (\n      e.keyCode === 65 ||\n      e.keyCode === 83 ||\n      e.keyCode === 68 ||\n      e.keyCode === 70 ||\n      e.keyCode === 74 ||\n      e.keyCode === 75 ||\n      e.keyCode === 76 ||\n      e.keyCode === 186 \n      ) {\n      sound.play();\n      keyPressed.classList.add('playing');\n      setTimeout(() => {\n        keyPressed.classList.remove('playing');\n      }, 100);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"keyboardKey\" id=\"65\">a</div>\n        <div className=\"keyboardKey\" id=\"83\">s</div>\n        <div className=\"keyboardKey\" id=\"68\">d</div>\n        <div className=\"keyboardKey\" id=\"70\">f</div>\n        <div className=\"keyboardKey\" id=\"74\">j</div>\n        <div className=\"keyboardKey\" id=\"75\">k</div>\n        <div className=\"keyboardKey\" id=\"76\">l</div>\n        <div className=\"keyboardKey\" id=\"186\">;</div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}